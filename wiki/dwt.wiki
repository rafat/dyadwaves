== Wavelet Transform ==

   There are three wavelet transform modes - dwt_sym, swt and dwt_per. Each has same display system and the DWT output can be saved as a text file using the "Save DWT Output" button. 

=== 1D::Decimated DWT (Symmetric Extension) ===

 Of all the modes , this one is the best equipped to deal with signal boundary issues. Signal is symmetrically extended at every stage so there are no sharp jumps and discontinuities. On the negative side, there is some redundancy in the system as this isn't an N input N output system.

https://lh4.googleusercontent.com/-PCJ9CWxHYN0/TiDyuvbZ7eI/AAAAAAAAAG4/P6K0fPb-8AE/s800/db1.png
_Example:: 2 Level dwt_sym decomposition using db1 wavelet_


=== 1D::Stationary Wavelet Transform(Undecimated) ===

  For 1D case, an N input signal yields 2XN output coefficients at each stage. There is more redundancy but it is useful in cases where translation-invariance is needed. This software also uses SWT (alongside the other two modes) for denoising.

 https://lh3.googleusercontent.com/-U-xjVuBxFzk/TiIdkwlhi6I/AAAAAAAAAH4/O0-2DzK7ZIE/s800/swt.png
_Example:: 2 Level SWT Decomposition of a 5400 sample signal_


=== 1D::Decimated DWT (Periodic Extension) ===

dwt_per mode is a N input and ~N output system and ,thus, often is the fastest scheme of the three.Although, periodic extension may sometimes result in subpar performance at the signal boundaries. Regardless, having least redundancy makes it suitable for some approximation applications.

https://lh6.googleusercontent.com/-VKnKRO_8UFE/TiIeu__ks3I/AAAAAAAAAH8/H99ab3jhxxE/s800/dwt_per.png
_Example:: 3 Level Decomposition of a piecewise regular signal using dwt with periodic extension_